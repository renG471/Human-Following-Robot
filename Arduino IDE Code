#include <AFMotor.h>

// Motors: M1â€“M4 on motor shield
AF_DCMotor motor1(1);
AF_DCMotor motor2(2);
AF_DCMotor motor3(3);
AF_DCMotor motor4(4);

// Sensor pins
#define trigPin A4
#define echoPin A5
#define irLeftPin A2
#define irRightPin A3

void setup() {
  Serial.begin(9600);

  // Set initial motor speeds
  motor1.setSpeed(150);
  motor2.setSpeed(150);
  motor3.setSpeed(150);
  motor4.setSpeed(150);

  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);

  pinMode(irLeftPin, INPUT);
  pinMode(irRightPin, INPUT);
}

void loop() {
  int distance = getDistance();

  bool leftDetected = digitalRead(irLeftPin) == LOW;  // assuming IR active LOW
  bool rightDetected = digitalRead(irRightPin) == LOW;

  Serial.print("Distance: ");
  Serial.print(distance);
  Serial.print(" cm, IR Left: ");
  Serial.print(leftDetected);
  Serial.print(", IR Right: ");
  Serial.println(rightDetected);

  if (distance < 20) {  // Obstacle too close
    stopMotors();
    delay(200);
    moveBackward();
    delay(500);
    stopMotors();
    delay(200);
  }
  else if (leftDetected && !rightDetected) {
    // Object detected on left: turn right to follow
    turnRight();
  }
  else if (rightDetected && !leftDetected) {
    // Object detected on right: turn left to follow
    turnLeft();
  }
  else if (leftDetected && rightDetected) {
    // Object centered, move forward
    moveForward();
  }
  else {
    // No object detected, stop or slowly move forward
    stopMotors();
  }

  delay(100);
}

// Ultrasonic distance measurement
int getDistance() {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  long duration = pulseIn(echoPin, HIGH, 30000);  // timeout 30ms
  if (duration == 0) return 999; // no echo

  return duration * 0.034 / 2;
}

void moveForward() {
  motor1.setSpeed(180);
  motor2.setSpeed(180);
  motor3.setSpeed(180);
  motor4.setSpeed(180);

  motor1.run(FORWARD);
  motor2.run(FORWARD);
  motor3.run(FORWARD);
  motor4.run(FORWARD);
}

void moveBackward() {
  motor1.setSpeed(150);
  motor2.setSpeed(150);
  motor3.setSpeed(150);
  motor4.setSpeed(150);

  motor1.run(BACKWARD);
  motor2.run(BACKWARD);
  motor3.run(BACKWARD);
  motor4.run(BACKWARD);
}

void turnLeft() {
  motor1.setSpeed(180);
  motor2.setSpeed(180);
  motor3.setSpeed(180);
  motor4.setSpeed(180);

  motor1.run(BACKWARD);
  motor2.run(BACKWARD);
  motor3.run(FORWARD);
  motor4.run(FORWARD);
  delay(600);
  stopMotors();
}

void turnRight() {
  motor1.setSpeed(180);
  motor2.setSpeed(180);
  motor3.setSpeed(180);
  motor4.setSpeed(180);

  motor1.run(FORWARD);
  motor2.run(FORWARD);
  motor3.run(BACKWARD);
  motor4.run(BACKWARD);
  delay(600);
  stopMotors();
}

void stopMotors() {
  motor1.run(RELEASE);
  motor2.run(RELEASE);
  motor3.run(RELEASE);
  motor4.run(RELEASE);
}
